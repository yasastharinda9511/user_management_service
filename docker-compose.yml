version: '3.8'

services:
  # Database service
  postgres:
    image: postgres:15-alpine
    container_name: user_management_db
    environment:
      POSTGRES_USER: ${DB_USER:-user_service}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password123}
      POSTGRES_DB: ${DB_NAME:-user_management}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/table_script.sql:/docker-entrypoint-initdb.d/table_script.sql
    networks:
      - user_management_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-user_service}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Your application service
  user_management_service:
    build:
      context: .              # Build context is project root
      dockerfile: Docker/Dockerfile  # Dockerfile path relative to context
    container_name: user_management_app
    environment:
      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-user_service}
      DB_PASSWORD: ${DB_PASSWORD:-password123}
      DB_NAME: ${DB_NAME:-user_management}
      DB_SSL_MODE: disable
      
      # JWT configuration
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this}
      JWT_TOKEN_DURATION: ${JWT_TOKEN_DURATION:-1} # hours
      
      # Bcrypt configuration
      BCRYPT_COST: ${BCRYPT_COST:-12}
      
      # Server configuration
      SERVER_PORT: 8080
      SERVER_HOST: 0.0.0.0
      
      # Environment
      APP_ENV: ${APP_ENV:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - user_management_network
    volumes:
      - ./logs:/app/logs # Optional: mount logs directory
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local

networks:
  user_management_network:
    driver: bridge
